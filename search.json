[{"title":"英语","path":"/article/e246e5b.html","content":"单词本forumn 论坛bring up养育；提出mannern 方式；做法；风格；礼貌in a visible manneraffectv 影响-&gt; n effectdue to由于on an infinite loop在无限循环中mainstreamn 主流v 使…成为主流adj 主流的the bleeding edge version最新版本、最前沿的版本"},{"title":"捣腾git","path":"/article/c12b92fd.html","content":"今天git整魔怔了，记一下用到的命令。 一般 克隆 1git clone --recursive &lt;repository&gt; 添加远程库 1git remote add origin &lt;repository&gt; 关联 1git push -f --set-upstream origin main:main 强制推送 1git push -f 子模块 添加子模块 1git submodule add &lt;repository&gt; &lt;path&gt; 初次拉取子模块 1git submodule update --init --recursive 分支 查看所有分支 1git branch -a"},{"title":"考场 NOI Linux 2.0 下的 VSCode 极限展开","path":"/article/f5f849be.html","content":"8月21号更新，添加 windows 配置。其实 windows 的方案早就有了，只是放假来不及写 在 linux 和 vscode 上中毒这么久，咱自认为咱有如题目所写的自信。目标：快速、便捷、优雅。 坑已挖好，请跳 在开始之前，你要知道 如果平时 IDE 不是 VSCode，就没有必要陪咱踩水坑。 一定要跟着操作一遍，不然可能理解不到咱的意思。 平时就不用 c++ 插件，考场才能从容不迫鸭。 不可能实现的 中文环境 可视化调试 高级补全 字体 环境 由于虚拟机玩不来，所以原谅咱直接用本机（Ubuntu 24.04 LTS and VSCode 1.91 and chinese）的图片 。。不过以下所有内容咱均是在 NOI Linux 2.0 上测试过的。 但是请你自己为自己着想，在全程断网的虚拟机（推荐直接不配置网卡）中用 NOI Linux 2.0 and VSCode 1.54 进行以下练习！ 没必要实体机上 NOI Linux。不得不说，实体机装 NOI Linux 真是**（自行打码，不是违禁词哦），不要问咱怎么知道的！ 实现了的 咱会把编译（build）和测试（test）分开讲解。 一键编译 编辑生成任务 新建 ./.vscode/tasks.json 并输入： 点击放大 啊，你说什么？记不住？抱歉，VSCode 会自动提供补全，你需要记住的只有以下一点关键字（因为 markdown 效果不好所以用图片了 如果你还是记不到第二级的 6 个关键字，可以尝试合起来，记作 log cat （日志猫？）。学废了么？ 注意： group 选倒数第二个 。 type 选第二个。 同级之间有逗号。 一个字母的地方，直接输入这个字母，然后直接按 Enter 或 Tab 以接受第一个补全。 一定要练习一下！不然你不会知道 args 那里如果像 关键字图片 里那样写作一行会出问题。 一定要在 NOI Linux 中练习！不然你不会知道 $&#123;file&#125; 和 $&#123;fileDirname&#125; 在 VSCode 旧版本中不提供补全。 一些补充 解释一下 ${ }表达式含义例子${file}当前打开的文件的绝对路径/home/sin/Desktop/1/test.cpp${fileDirname}当前打开的文件的完整目录名/home/sin/Desktop/1${fileBasename}当前打开的文件的文件名test.cpp${fileBasenameNoExtension}当前打开的文件的文件名 (不包含文件扩展名)test关于生成的程序因为使用的是 -o ${file}.exe，所以生成的程序为 test.cpp.exe。实际上 linux 的运行文件没有后缀名的概念，咱用 .exe 主要是从 windows 带过来的习惯，区分代码和程序。参数可以自行发挥以上是精简模式，实际上参数可以自行发挥，比如：1234567891011121314151617// json 里实际上不能有注释&quot;args&quot;: [ // 始终使用彩色信息 （不知道有什么用 &quot;-fdiagnostics-color=always&quot;, &quot;-g&quot;, &quot;$&#123;file&#125;&quot;, &quot;-std=c++14&quot;, // 两个警告参数 &quot;-Wall&quot;, &quot;-Wextra&quot;, &quot;-o&quot;, // 相比与 &quot;$&#123;file&#125;.exe&quot;，可以去掉中间的 .cpp。 // 这里 .exe 也可以不要 &quot;$&#123;fileBasenameNoExtension&#125;.exe&quot;, // 侦测RE &quot;-fsanitize=address,leak,undefined&quot;]还可以再精简一些？实际上 options、args 和 type 属性不是必要的。optionsargstype这里我们只用 &quot;cwd&quot;: &quot;${fileDirname}&quot; 设置了运行的位置。如果文件都是以绝对路径传入（使用 ${file}），或是所有文件都在工作区根目录上，就不需要这一项。所有文件都在工作区根目录上 是什么意思？建了子文件夹的就不是。如上面的 tasks.json 就是在 .vscode 子文件夹下。所以说，如果写对拍，写 ./duipai/duipai.cpp，而且还是 -o ${fileBasenameNoExtension}，就要注意了。你也可以用 -o ${fileDirname}/{fileBasenameNoExtension}，使其成为绝对路径。参数列表实际上只是，加上空格，然后顺次接在 command 的后面。所以你可以直接把所有参数写在 command 的后面。只是如果某一项里有空格，它会莫名其妙地都包上一层单引号。。所以不能前面一段参数，后面一段参数。咱把它拎出来，是为了凑齐cat是为了在写多个参数时优雅一些。这里 VSCode 给了两种选择 process（作为进程） 和 shell（作为命令）。虽然默认为 process，但是咱并不了解。你可以自行研究，咱不负责。 绑定快捷键 即使你知道可以使用 Ctrl+Shift+B 来运行生成任务，也不能说是一键编译。 按快捷键 Ctrl+K Ctrl+S 或点击左下方齿轮再点击 Keyboard Shortcuts，搜索 tasks.build，右键第一个，菜单里选有 Add（添加）或 Change（修改）的那一项，在键盘上按一个心仪的键（比如F6），然后 ENTER。冲突什么的不用管。 添加快捷键 这一步一定要在 English 环境下练习哦。 一键运行 编辑测试任务并绑定快捷键 测试任务这个板块咱分出了一些小点。所以这里第一步没什么重点，参考上面 build 即可。 group 选最后一个。如果上面用的 $&#123;fileBasenameNoExtension&#125;.exe 记得跟着改。 A+B Problem 效果 绑定快捷键同上。咱用的 F5。 独立运行窗口 目前程序已经可以在 VSCode 的集成终端内运行了，但是有许多像咱一样的小伙伴希望程序运行在独立窗口。 这里用到 gnome-terminal 命令，格式 gnome-terminal -- 要执行的内容。 123456&quot;command&quot;: &quot;gnome-terminal&quot;,&quot;args&quot;: [ &quot;--&quot;, &quot;$&#123;file&#125;.exe&quot;],&quot;type&quot;: &quot;shell&quot; pause 然后，你会发现窗口是打开了，但运行完结果都没看到就退出了。 两个方法，改终端配置（不推荐），或着写一个 pause 命令（linux 没有这个命令）。 改终端配置的方法真的不建议，所以一张图带过。 新建 ./pause 并编辑： 1234567#!/bin/bashecho &quot;&quot;echo &quot; ----------------------------------------- &quot;echo &quot; Press any key to continue . . .&quot;read -s -n 1 核心代码只有一句 read -s -n 1，不做解释。简单吧。 打开终端，cd 到这个位置，输入 ./pause，回车。效果如何？ 为了避免麻烦，咱们把它丢到 环境变量 里。 cp 是复制命令。 sudo 用户密码应该会提前告知，如果没告知就问，如果不说就试 123456。 然后该改 tasks.json。 1234567&quot;command&quot;: &quot;gnome-terminal&quot;,&quot;args&quot;: [ &quot;--&quot;, &quot;bash&quot;, &quot;-c&quot;, &quot;\\&quot;$&#123;file&#125;.exe; pause\\&quot;&quot;] 这里咱套了个 bash，不然 pause 会和 gnome-terminal 命令同级。注意后面转义了一对双引号。 注：gnome-terminal 命令在打开窗口后就结束了，与程序的运行不相干。 栈空间 Linux 的栈空间不能在编译时控制，只能运行前用 ulimit -s 524288 调。 关于 ulimit，自己查去！ 但是这种修改是临时的，且只对同一终端有效。像咱这种新建终端的网上根本找不到第二家，咱硬是磕了几个月都没想到办法。想到办法之后就来发文了。看咱多好心！ 1234567&quot;command&quot;: &quot;gnome-terminal&quot;,&quot;args&quot;: [ &quot;--&quot;, &quot;bash&quot;, &quot;-c&quot;, &quot;\\&quot;ulimit -s 524288; $&#123;file&#125;.exe; pause\\&quot;&quot;] 在 $&#123;file&#125;.exe 前面加上 ulimit -s 524288; ……至于为什么这么简单的东西想了几个月这个问题，咱的回答是：咱之前一直用的 独立运行窗口 那一版本的 tasks，然后直接在代码末尾 system(&quot;pause&quot;);……直到偶然看到 bash -c &quot; &quot; 才脑袋开窍的。 对了，千万不要尝试在实体机上修改系统文件以永久开大栈空间，除非你想体验在 Ubuntu 紧急模式中对着原始的 shell 界面恢复你刚刚修改的那个文件。 提高体验 想必你已经注意到了，咱的终端是透明的！这样不但好看，而且可以方便地比较多个运行结果。 真的很简单，所以一张图搞定。 一键编译运行 如果你需要，就再写一个任务。 123456789&#123; &quot;label&quot;: &quot;build and test&quot;, &quot;group&quot;: &#123; &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true &#125;, &quot;dependsOn&quot;: [&quot;build&quot;, &quot;test&quot;], &quot;dependsOrder&quot;: &quot;sequence&quot;&#125; 然后需要把上面 build 任务的 group 属性删掉。VSCode 给 tasks 只分配了两个一键调用的位置， 一键编译 和 一键编译运行 只能选一个（显然你也只需要一个）。 由于是把 build 的位置抢了，所以不需要再添加快捷键。 windows同款配置 上面咱说了句介个： 平时就不用 c++ 插件，考场才能从容不迫鸭。 但是很多童鞋由于各种原因不得不使用 windous，于是填坑。 生成任务大概没有问题。加上开大栈空间的参数就行。 测试任务就不能用 gnome-terminal 了，那是 Ubuntu 的 gnome 桌面的终端……掏出 start 和 cmd。 123456&quot;command&quot;: &quot;start&quot;,&quot;args&quot;: [ &quot;cmd&quot;, &quot;/c&quot;, &quot;\\&quot;$&#123;fileBasenameNoExtension&#125;.exe &amp;&amp; pause\\&quot;&quot;,], 完整 task.json 文件 看在你认真看完的份上，就允许你抄作业啦。 考场极简单配置输出文件 *.cpp.exe，运行弹框，集成 pause，不扩栈。记得绑定快捷键。123456789101112131415161718192021222324252627&#123; &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ &#123; &quot;label&quot;: &quot;build&quot;, &quot;group&quot;: &#123; &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true &#125;, &quot;command&quot;: &quot;g++ $&#123;file&#125; -o $&#123;file&#125;.exe&quot;, &quot;type&quot;: &quot;shell&quot; &#125;, &#123; &quot;label&quot;: &quot;test&quot;, &quot;options&quot;: &#123; &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot; &#125;, &quot;group&quot;: &#123; &quot;kind&quot;: &quot;test&quot;, &quot;isDefault&quot;: true &#125;, &quot;command&quot;: &quot;gnome-terminal -- bash -c \\&quot;$&#123;file&#125;.exe; echo &#x27; ------done------&#x27;; read -s -n 1\\&quot;&quot;, &quot;type&quot;: &quot;shell&quot; &#125; ]&#125; 考场配置输出文件 *.cpp.exe，运行弹框，集成 pause，扩栈，一些编译选项。记得绑定快捷键。12345678910111213141516171819202122232425262728293031323334353637383940&#123; &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ &#123; &quot;label&quot;: &quot;build&quot;, &quot;group&quot;: &#123; &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true &#125;, &quot;command&quot;: &quot;g++&quot;, &quot;args&quot;: [ &quot;$&#123;file&#125;&quot;, &quot;-o&quot;, &quot;$&#123;file&#125;.exe&quot;, &quot;-g&quot;, &quot;-std=c++14&quot;, &quot;-Wall&quot;, &quot;-Wextra&quot;, &quot;-fsanitize=address,leak,undefined&quot; ], &quot;type&quot;: &quot;shell&quot; &#125;, &#123; &quot;label&quot;: &quot;test&quot;, &quot;group&quot;: &#123; &quot;kind&quot;: &quot;test&quot;, &quot;isDefault&quot;: true &#125;, &quot;command&quot;: &quot;gnome-terminal&quot;, &quot;args&quot;: [ &quot;--&quot;, &quot;bash&quot;, &quot;-c&quot;, &quot;\\&quot;ulimit -s 524288; $&#123;file&#125;.exe; echo &#x27; ------done------&#x27;; read -s -n 1\\&quot;&quot; ], &quot;type&quot;: &quot;shell&quot; &#125; ]&#125; 更强大的配置输出文件 *.exe，运行弹框，独立 pause，扩栈，一些编译选项。同时支持 Windows 和 Ubuntu 系统。这是咱哥平时用配置，有修改，已经过他本人允许。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&#123; &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ &#123; &quot;label&quot;: &quot;build&quot;, &quot;options&quot;: &#123; &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot; &#125;, &quot;group&quot;: &#123; &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true &#125;, &quot;command&quot;: &quot;g++&quot;, &quot;args&quot;: [ &quot;-fdiagnostics-color=always&quot;, &quot;-g&quot;, &quot;$&#123;file&#125;&quot;, &quot;-std=c++14&quot;, &quot;-Wall&quot;, &quot;-Wextra&quot;, &quot;-o&quot;, &quot;$&#123;fileBasenameNoExtension&#125;.exe&quot;, &quot;-fsanitize=address,leak,undefined&quot; ], &quot;type&quot;: &quot;shell&quot;, &quot;windows&quot;: &#123; &quot;args&quot;: [ &quot;-fdiagnostics-color=always&quot;, &quot;-g&quot;, &quot;$&#123;file&#125;&quot;, &quot;-std=c++14&quot;, &quot;-Wall&quot;, &quot;-Wextra&quot;, &quot;-o&quot;, &quot;$&#123;fileBasenameNoExtension&#125;.exe&quot;, &quot;-Wl,--stack=536870912&quot; ] &#125; &#125;, &#123; &quot;label&quot;: &quot;test&quot;, &quot;options&quot;: &#123; &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot; &#125;, &quot;group&quot;: &#123; &quot;kind&quot;: &quot;test&quot;, &quot;isDefault&quot;: true &#125;, &quot;command&quot;: &quot;gnome-terminal&quot;, &quot;args&quot;: [ &quot;--&quot;, &quot;bash&quot;, &quot;-c&quot;, &quot;\\&quot;ulimit -s 524288; ./$&#123;fileBasenameNoExtension&#125;.exe; pause\\&quot;&quot; ], &quot;type&quot;: &quot;shell&quot;, &quot;windows&quot;: &#123; &quot;command&quot;: &quot;start&quot;, &quot;args&quot;: [ &quot;cmd&quot;, &quot;/c&quot;, &quot;\\&quot;$&#123;fileBasenameNoExtension&#125;.exe &amp;&amp; pause\\&quot;&quot;, ], &#125; &#125; ]&#125; 推荐了解 VSCode 用户代码片段（snippets）。"},{"title":"白嫖表","path":"/article/d886c492.html","content":"记录遇到的不给钱的东西。 以下评论代表个人意见，且只针对免费的部分。 服务 github Pages 基础。方便。 cloudflare Pages 相较于github Pages，有网络的优势。 cloudflare 域名相关 好用。 注意，如果不是绑定的cloudflare Workers/Pages，证书给不到 *.*.your-domain。咱真过分 tinypng图片压缩 好用。 可惜只支持png/jpeg/webp vercel 用途广泛。 只是要考虑墙的问题。 cloudflare Workers 一样被墙了…… giscus评论系统 好用。 但为什么最近国内访问不稳定？ 其他奇怪的东西 一些没搞懂、没试过或意义不大的玩意。 云电脑 比如阿里的无影云。 一般有几个月，配置不高不低。不能认真用，但可以拿来耍耍。 eu.org免费域名 好像可以，但没试过。看起来有点麻烦 Freeing图床 有人推荐，但没试过，需求不大的可以用着。"},{"title":"记第一次购买配置域名","path":"/article/de8034df.html","content":"域名购买 用的namesilo买域名，同学推荐的，的确好用。 namesilo支持支付宝，支付宝不绑定银行卡也有一定额度，喜 。 域名解析 域名解析用的cloudflare，它的网络很好。随便丢一个参考教程. 域名绑定 咱的博客是放在cloudflare pages上的，自定义域 -&gt; 设置自定义域 -&gt; 填入域名 -&gt; ……啊？好啦？ ps：当时咱正在困惑的问同学A记录、CNAME文件，回过头却发现……好在，线上问的，没人尴尬。 本来用的 blog.limit-bed.com 子域名，但发现不好看，于是就重新绑上 limit-bed.com。反正就输入一次域名的事。 题外话，咱的博客实际上是本地构建静态资源，hexo d 到.github.io仓库。但是.github.io网不好，又用cloudflare pages绑上了这个仓库。可以试试https://lim-watt.github.io/和https://limit-bed.pages.dev/。于是就有了一个博客两个page服务三个域名的奇观。"},{"title":"博客重建计划","path":"/article/80602270.html","content":"已完成： 1选择主题：stellar2基本配置3friends和about页面3域名绑定 正在做： O1 2024年持续更新博客 正常 0% KR1 笔记 正常 1% KR2 文章 正常 0% KR3 开发 正常 0% KR4 小说 未开始 0% O2 针对Stellar进行乱搞优化 正常 50% KR1 域名 已完成 100% KR2 图床 已完成 100% KR3 dark模式 正常 10% KR4 侧边栏组件添加 正常 10% KR5 vscode标签组件补全 正常 30%"},{"title":"关于","path":"/about/index.html","content":"朋友圈关于Lim&nbsp;WattSleeping... (~﹏~).zZ 关于本站 本站用于记录一个不长记性的白痴的笔记、随笔、动态等，于2024年5月24日开始重建，前后无关。 重建博客的初衷是发现自己不但记性不好，而且完全没有记录的习惯。重建博客的动力是对Stellar主题一见钟情，感谢诸位dalao的贡献。 实际上，把笔记记下来放在博客上，能帮助到其他的人，这也是一种快乐吧。 个人动态 免责声明 本站中的内容仅表达个人思想与学术。 本站中的内容不涉及政治偏向。 本站中的内容不保证正确性。对任何因参考本站中的内容而产生的问题不负责。 本站原则上不会转载他人文章。本站保护他人合法知识产权。如有侵权，请及时联系。 本站中的内容原则上不接受他人转载。引用请表明出处。 本人对本人本站中的内容保留最终解释权。"},{"path":"/css/index.css","content":".l_left { background-position: center } footer p { text-align: center } /* 文章内链接：为链接使用荧光笔下划线效果 */ li:not([class]) a:not([class]), p:not([class]) a:not([class]), table a:not([class]) { padding-bottom: 0.1rem; background: linear-gradient(0, var(--theme-link-opa), var(--theme-link-opa)) no-repeat center bottom / 100% 40%; }"},{"title":"友链","path":"/friends/index.html","content":"朋友圈关于醉酒共天涯 友链大佬友文tsxc的小站Halberd Cease's Blog正弦慢卷xaoxuu杜老师说 注擅自膜拜，不喜联系删除。"}]